package mr.hw3.main;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import mr.hw3.datatypes.Node;
import mr.hw3.utility.EncodingTypes;
import mr.hw3.utility.Utility;

/**
 * PageRankCorrection Job: This class executes Map only job to correct the
 * page rank output generated by the last iteration of a PageRank job.
 * @author dspatel
 */
public class PageRankCorrectionJob
{
	/**
	 * Mapper class 
	 * @author dspatel
	 */
	public static class PageRankCorrectionMapper extends Mapper<Object, Text, Text, NullWritable> 
	{
		/**
		 * This map function decodes the Node from Text, updates it page rank and
		 * emit it.
		 */
		@Override
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException 
		{
			// decode the Node from Text
			Node node = Utility.decodeNode(value, EncodingTypes.NID_AL_PR_OPR);
			
			// update the pageRank
			node.updatePageRank(context.getConfiguration());
			
			// emits nodeId with final page rank 
			context.write(Utility.encodeNode(node, EncodingTypes.NID_PR), NullWritable.get());
		}
	}
	
	/**
	 * This method executes the LastPageRankCorrectionJob
	 * @param inputPath
	 * @param outputPath
	 * @param numberOfPages
	 * @param alpha
	 * @param delta
	 * @return
	 * @throws Exception
	 */
	public boolean runPageRankCorrectionJob(String inputPath, String outputPath, Long numberOfPages, Double alpha, Double delta) throws Exception
	{
		Configuration conf = new Configuration();
		conf.set("NUMBER_OF_PAGES", numberOfPages.toString());
		conf.set("ALPHA", alpha.toString());
		conf.set("DELTA", delta.toString());

		Job job = Job.getInstance(conf, "PageRankCorrectionJob");
		job.setJarByClass(PageRankCorrectionJob.class);

		FileInputFormat.addInputPath(job, new Path(inputPath));
		FileOutputFormat.setOutputPath(job, new Path(outputPath));

		job.setMapperClass(PageRankCorrectionMapper.class);
		// Map Only Job
		job.setNumReduceTasks(0);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(NullWritable.class);

		return job.waitForCompletion(true);
	}
}